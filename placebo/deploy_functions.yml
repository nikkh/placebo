trigger: 
   branches:
    include:
    - master
   paths:
    include:
    - MarginSurvey/MarginSurvey.Functions/*

variables:
- group: margin-survey-common
- name: functionAppName
  value: '$(applicationName)-func'
- name: vmImageName
  value: 'windows-latest'
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)/MarginSurvey/MarginSurvey.Functions'
- name: sqlScriptDirectory
  value: '$(System.DefaultWorkingDirectory)/MarginSurvey/MarginSurvey.Functions/SQLScripts'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/MarginSurvey.Functions.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(sqlScriptDirectory)'
        Contents: '**'
        TargetFolder: '$(System.DefaultWorkingDirectory)/publish_output'


    - task: CmdLine@2
      inputs:
        script: 'dir $(System.DefaultWorkingDirectory)\publish_output\*.*'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: DeployApplication
  displayName: Deploy Application
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)\drop\*.zip'
              destinationFolder: '$(Pipeline.Workspace)\extracteddrop'
              cleanDestinationFolder: true


          - task: CmdLine@2
            inputs:
              script: |
                dir $(Pipeline.Workspace)
                dir $(Pipeline.Workspace)\a
                dir $(Pipeline.Workspace)\b
                dir $(Pipeline.Workspace)\drop
                dir $(Pipeline.Workspace)\s


          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(serviceConnectionName)'
              appType: 'functionApp'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'

          - task: SqlAzureDacpacDeployment@1
            inputs:
              azureSubscription: '$(serviceConnectionName)'
              AuthenticationType: 'server'
              ServerName: '$(applicationName)-db-server.database.windows.net'
              DatabaseName: '$(applicationName)-db'
              SqlUsername: '$(adminLogin)'
              SqlPassword: '$(password)'
              deployType: 'SqlTask'
              SqlFile: '$(Pipeline.Workspace)\extracteddrop\Create_Tables.sql'
              IpDetectionMethod: 'AutoDetect'

